import TestPreview from "../_components/TestPreview";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import {
  getHistoryTests,
  getOpeningTests,
  getUpcomingTests,
} from "./_components/action";
import { auth } from "@/lib/auth";
import { redirect } from "next/navigation";
import { format } from "date-fns";
import { getSubmitRecord } from "../tests/[id]/_components/action";

type Test = {
  id: string;
  name: string;
  description: string;
  submitted: boolean;
  startTimestamp: string;
  endTimestamp: string;
};

const processTest = async (test: {
  testId: string;
  testTitle: string;
  startDate: Date;
  endDate: Date;
}) => {
  return {
    id: test.testId,
    name: test.testTitle,
    description: "testDescription",
    submitted: (await getSubmitRecord(test.testId)) ? true : false,
    startTimestamp: format(test.startDate, "yyyy/MM/dd hh:mm:ss a"),
    endTimestamp: format(test.endDate, "yyyy/MM/dd hh:mm:ss a"),
  };
};

export default async function StudentPage() {
  const session = await auth();
  if (!session || !session.user) redirect("/student/login");

  const classNumber = session.user.classNumber;
  const [openingTests, historyTests, upcomingTests] = await Promise.all([
    getOpeningTests(classNumber).then((tests) =>
      Promise.all(tests.map((test) => processTest(test)))
    ),
    getHistoryTests(classNumber).then((tests) =>
      Promise.all(tests.map((test) => processTest(test)))
    ),
    getUpcomingTests(classNumber).then((tests) =>
      Promise.all(tests.map((test) => processTest(test)))
    ),
  ]);

  // const openingTests: Test[] = Array.from({ length: 3 }).map((_, i) => ({
  //   id: `${i}-fsghl9f`,
  //   name: `Test ${i}`,
  //   description:
  //     "This is a reading comprehension test generated by Large Language Model. Please read the passage and answer the questions.",
  //   submitted: (i & 1) === 0,
  //   startTimestamp: "2024-07-01T00:00:00Z",
  //   endTimestamp: "2024-09-01T15:59:59Z",
  // }));

  return (
    <Accordion
      type="multiple"
      defaultValue={["Opening Tests"]}
      className="w-full"
    >
      <TestsDashboard title="Opening Tests" tests={openingTests} />
      <TestsDashboard title="Upcoming Tests" tests={upcomingTests} />
      <TestsDashboard title="History Tests" tests={historyTests} />
    </Accordion>
  );
}

type TestsDashboardProps = {
  tests: Test[];
  title: string;
};

function TestsDashboard({ tests, title }: TestsDashboardProps) {
  return (
    <AccordionItem value={title}>
      <AccordionTrigger className="text-2xl font-bold">
        {title}
      </AccordionTrigger>
      <AccordionContent className="space-y-4">
        {tests.length > 0
          ? tests.map((test) => (
              <TestPreview
                key={test.id}
                id={test.id}
                name={test.name}
                description={test.description}
                submitted={test.submitted}
                startTimestamp={test.startTimestamp}
                endTimestamp={test.endTimestamp}
              />
            ))
          : "No tests of this type available."}
      </AccordionContent>
    </AccordionItem>
  );
}
